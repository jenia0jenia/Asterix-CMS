/* 
 * @author Sergey Nikitin 
 * @version 0.1 
 * www.mrnix.ru
 * */
(function($){

  jQuery.fn.combosex = function(options){
  
    $B = $('body');
  
    $D.undelegate('.combosex');

    var CS = {
      cntxt: this,
      args: arguments,
      browser: jQuery.browser,
      defaults:   {
        fadeSpeed: 0,
        scrollWidth: false,
        strict: true,
        append: true, // TODO;
        options: false,
        tags: false,
        tagsDel: ',',
        appendCheck: false,
        classCombo: false,
        classOptions: false,
        showOnFocus: true,
        placeholder: '',
        numeric: false,
        delay:0,
        lang: {
          noResults: 'No results match'
        }
      }
    }
    
    var csdebounce = function ( fn, timeout, invokeAsap, ctx ) {
  
      if(arguments.length == 3 && typeof invokeAsap != 'boolean') {
        ctx = invokeAsap;
        invokeAsap = false;
      }
  
      var timer;
  
      return function() {
        var args = arguments;
        ctx = ctx || this;
  
        invokeAsap && !timer && fn.apply(ctx, args);
        clearTimeout(timer);
        timer = setTimeout(function() {
          !invokeAsap && fn.apply(ctx, args);
          timer = null;
        }, timeout);
  
      }
    }
    
    var scrollbarWidth = function () {
      var outer = $('<div class="combosex_testscroll_outer" style="width:200px;height:200px;overflow:auto;visibility:hidden;position:absolute;z-index:-10000;top:-10000px;left:-10000px;"><div class="combosex_testscroll_inner" style="width:100px;height:300px;"></div></div>'),
          inner = $('<div class="combosex_testscroll_auto" style="height:20px;"></div>');
      outer.prepend(inner);
      $B.append(outer);
      var width = 200-inner.innerWidth();
      outer.remove();
      return width;
    }
  
  
    Combosex = function ($obj, options, args) {

      if (typeof options == "string") {
        if ($obj.data("csuid")) {
          var csuid = $obj.data("csuid");
          if (combo[csuid]) {
            if (combo[csuid].API[options]) {
              var nargs = [];
              for (var i = 1; i<args.length; i++) {
                nargs.push(args[i]);
              }
              combo[csuid].API[options].apply(combo[csuid],nargs);
            }
          }
        }
        return false;
      }
      

      
      var self = this;  
      self.$obj = $obj;
      
      self.attach = function() {
        if (self.$obj.hasClass("combosexed")) {return false;}
        self.$obj.addClass("combosexed");
        self.options = $.extend(CS.defaults,options); 
         
        self.extra = {
          input: true,
          readonly: false,
          disabled: false,
          multiple: false,
          append:   false,
          readonly: false
        };
        
        
        
        cslength++; 
        self.uid = cslength;
        
        if (self.options.scrollWidth) {
          self.scrollWidth = self.options.scrollWidth;
        } else {
          self.scrollWidth = scrollbarWidth(); 
        }

  
        self.$combospan = $('<span class="combosex_main"></span>');
        self.$combospan.data("csuid",self.uid);
        
        if (self.options.classCombo) {
          self.$combospan.addClass(self.options.classCombo);
        }
        
        
        self.extra.readonly = self.$obj.prop("readonly");
        self.extra.disabled = self.$obj.prop("disabled");
        

        if (!self.data) {
          if (self.options.options) {
            self.data = {
              hash: getOptionsFromOptions ( self.options.options ) // :)
            }
          } else {
            self.data = {
              hash: getOptionsFromSelect ( self.$obj )
            }
          }
        }
        
        
        self.tagName = $obj.prop('tagName').toLowerCase();
        
        

        if (self.tagName == 'select') {
          self.extra.type     = 'select';
          self.extra.input    = false;
          self.extra.multiple = self.$obj.prop('multiple');
          self.firstactive    = self.$obj.find('option:selected:first');
        }

        if (self.options.tags) {
          self.extra.tags = true;
          if (self.tagName == 'input') {
            self.pval = self.$obj.val();
            var $newobj = $('<select multiple="multiple"></select>');
            if (self.$obj.attr("id")) {
              $newobj.attr("id",self.$obj.attr("id"));
            }
            if (self.$obj.attr("name")) {
              $newobj.attr("name",self.$obj.attr("name"));
            }
            if (self.$obj.attr("class")) {
              $newobj.attr("class",self.$obj.attr("class"));
            }
            self.$obj.replaceWith($newobj);
            self.$obj = $newobj;
          } else if (self.tagName == 'select') {
            self.$obj.attr("multiple","multiple");
          }
        }
        
        
        if (self.extra.type=="select" || self.options.tags) {
          self.extra.append = false;
          if (self.options.append) {
            self.extra.append = true; 
          }
        } 
  
        
  
        
        if (self.tagName == 'input') {
          self.extra.type   = 'input';
          self.extra.input  = true;
          self.extra.append = true;
          
          if (!self.options.append) {
            self.extra.append = false; 
          }
          var opt_arr = '';
          
          for (var r in self.data.hash) {
            opt_arr += '<option value="'+self.data.hash[r].val+'">'+self.data.hash[r].text+'</option>';
          }
          
          if (self.options.tags) {
            self.$obj.html(opt_arr);
            if (self.pval) {
              var arr = self.pval.split(self.options.tagsDel);
              var arr_trim = [];
              
              for (var j in arr) {
                var k = $.trim(arr[j]);
                arr_trim.push(k);
                var opt_ac = $('option[value="'+k+'"]',self.$obj);
                
                if (!opt_ac.length) {
                  opt_ac = $('<option value="'+k+'">'+k+'</option>');
                  self.$obj.append(opt_ac);
                }
                opt_ac.attr("selected","selected");
              }
  
              self.$obj.val(arr_trim);
              self.val = arr_trim;
            }
          }
        }
        
        

        
        if (self.extra.readonly) {
          self.$combospan.addClass('combosex_readonly')
        }
        if (self.extra.disabled) {
          self.$combospan.addClass('combosex_disabled')
        }
        
        self.$obj.hide();
        
        var objw = self.$obj.width();
        self.val = self.$obj.val();
        
        
        if (self.$obj.attr("placeholder") && self.options.placeholder=='') {
          self.options.placeholder = self.$obj.attr("placeholder");
        }
        
        self.$inp = $('<input autocomplete="off"  type="text" class="combosex_input combosex_input_'+self.uid+'" value="" />');
        self.$val = $('<input type="hidden" class="combosex_value" />').val(self.val);
        self.$def = $('<input type="hidden" class="combosex_def" />').val(self.val);
        self.$apndr = $('<a rel="'+self.uid+'" class="combosex_append">+</a>');
        self.$ph = $('<span class="combosex_ph" style="display:none">'+self.options.placeholder+'</span>');
        self.$spinner = $('<span class="combosex_spinner"></span>');
        
  
        self.$inp.data("csuid",self.uid);
        
        if (self.options.type) {
          self.extra.type = self.options.type;
        }
        
        if (self.options.multiple) {
          self.extra.multiple = true;
          self.$obj.attr("multiple","multiple");
        }
              
        if (self.options.input == true) {
          self.extra.input = true;
        }
  
        if (self.extra.append) {
          self.$combospan.addClass('combosex_with_append');
        }
  
        if (self.options.tags) {
          self.extra.multiple = false;
          self.extra.type = 'input'  
          self.$tags = $('<span class="combosex_tags"></span>');
          self.tagsRender (self.val);
          self.$combospan.addClass("combosex_tagged").prepend(self.$tags);
          self.$tags.wrap('<span class="combosex_tags_wrap"></span>');
          self.$tags.after('<span class="combosex_clear"></span>');
        }
        
        if (self.extra.type == "input") {
          if (self.options.tags) {
            
          } else {
            self.$combospan.addClass("combosex_text");
            self.$combospan.append('<span class="combosex_input_span"></span>');
            
            $('.combosex_input_span',self.$combospan).append(self.$ph,self.$inp);
            if (self.extra.append) {
             
              $('.combosex_input_span',self.$combospan).append(self.$apndr);
            }
            
            self.$inp.val(self.val);
            if (self.val && self.val!="") {
              self.$ph.hide(); 
            } else {
              self.$ph.show(); 
            }
          }
        }
  
  
        self.$obj.after(self.$combospan);
          
        if (self.extra.type == 'select') { 
          self.$combospan.addClass("combosex_select");
          if (self.extra.multiple) {
            self.$combospan.addClass("combosex_multi_select");
            var list = comboRender (self, self.data.hash);
            self.$list_multi = $('<div class="combosex_list_multi  combosex_listwrap_'+self.uid+'"><div class="combosex_options combosex_options_'+self.uid+'">'+list+'</div></div>');
  
            if (self.options.classOptions) {
              self.$list_multi.addClass(self.options.classOptions);
            }
  
            $(".combosex_options_active:first");
  
            if ($(".combosex_options_active",self.$list_multi).length) {
              self.lastoptionclicked = $(".combosex_options_active:first");
              self.startshift = self.lastoptionclicked;
            }
            
            self.$combospan.append(self.$list_multi);
            var heightminus = 0;
  
            if (self.extra.input) {
              self.$list_multi.prepend('<div class="combosex_search"><div></div></div><div class="combosex_search_nofound" style="display:none;"><em>'+self.options.lang.noResults+'</em></div>');
              self.$inp.val('');
              self.$ph.show();
              $('.combosex_search div',self.$list_multi).append(self.$ph, self.$inp);
              if (self.extra.append) {
                $('.combosex_search div',self.$list_multi).append(self.$apndr);
              }
            }
            
            self.$list_multi.delegate(".combosex_options a","mousedown.combosex",function() {
              self.$inp.trigger("focus.combosex");
              $(".combosex_main").removeClass("combosex_active");
              self.$combospan.addClass("combosex_active");
  
              var opt = $(this);
              self.lastoptionclicked = opt;
  
              if (down_ctrl) {
                opt.toggleClass("combosex_options_active");
                self.startshift = opt;
              } else if (down_shift) {
                if (self.startshift) {
                  $('a',self.$list_multi).removeClass("combosex_options_active");
                  var startindex = self.startshift.index('.combosex_options_'+self.uid+' a:visible');
                  var endindex = opt.index('.combosex_options_'+self.uid+' a:visible');
                  var select_from = startindex;
                  var select_to = endindex;
                  if (startindex > endindex) {
                    select_from = endindex;
                    select_to = startindex;
                  }
                  $('.combosex_options_'+self.uid+' a:visible').slice(select_from,select_to).addClass("combosex_options_active");
                  opt.addClass("combosex_options_active");
                  self.startshift.addClass("combosex_options_active");
                } else {
                  opt.addClass("combosex_options_active");
                  self.startshift = opt;
                }
              } else {
                $('a',self.$list_multi).removeClass("combosex_options_active");
                opt.toggleClass("combosex_options_active");
                opt.addClass("combosex_options_active");
                self.startshift = opt;
              }
              
              self.change_multi_values();
              self.lastoptionclicked = opt;
            });
  
            self.$list_multi.bind("focus.combosex",function(){
              self.multi_focus = true;
              multi_focused = self.uid;
              last_multi_focused = self.uid;
            });
            
            self.$list_multi.bind("blur.combosex",function(){
              
              
              if (last_multi_focused != multi_focused) {
                return false;
              }
              
              self.$combospan.removeClass("combosex_active");
              self.multi_focus = false;
              var firstvis = 0;
              $('.combosex_search_nofound').hide();
              self.$inp.val('');            
              
              if (self.extra.input && self.extra.multiple) {
                var preheight = $(".combosex_options ul",self.$list_multi).height();
                $(".combosex_options",self.$list_multi).html(comboRender(self, self.data.hash));
                
                multi_focused = false;
                self.$ph.show();
                
                if (self.val) {
                  var arr = self.val;
                  var opactived = '';
                  for (var i in arr) {
                    opactived += 'a[rel="'+arr[i]+'"],';
                  }
                  $('.combosex_options a',self.$list_multi).removeClass("combosex_options_active");
                  $(opactived,$(".combosex_options",self.$list_multi)).addClass("combosex_options_active");
                }
                
                var postheight = $(".combosex_options ul",self.$list_multi).height();
                if (preheight != postheight) {
                  firstvis = $(".combosex_options_active:first",self.$list_multi).index('.combosex_options_'+self.uid+' a');
                  var liheight = $('li:first',self.$list_multi).outerHeight();
                  var labelheight = $('.combosex_optgroup_label:first',self.$list_multi).outerHeight();
                  var labelsizes  = $('.combosex_optgroup_label',self.$list_multi).size();
                  var scrollTo = liheight*firstvis+(labelheight*labelsizes) - (self.$list_multi.height()/2);
                  $('.combosex_options',self.$list_multi).scrollTop(scrollTo);
                }
              }
            });
            self.$combospan.bind("mousedown.combosex", self.combo_mousedown);
          }
  
          else {
            if (self.$obj.attr("data-combosex-headline")) {
              self.extra.headline = self.$obj.attr("data-combosex-headline");
            }
            
            if (self.options.headline) {
              self.extra.headline = self.options.headline;
            }
            
            var display_val = self.val;
            var fas = $('option:selected:first',self.$obj);
            if (fas.length) { display_val = fas.text(); }
            self.$combospan.append('<span class="combosex_input_span"></span>');
            self.$dsp = $('<a href="javascript:void(0)" class="combosex_display"></a>').text(display_val);
            $('.combosex_input_span',self.$combospan).append(self.$dsp);
            
            if (self.$dsp) {
              self.$dsp.bind('focus.combosex',self.combo_dsp_focus);
              self.$dsp.bind('blur.combosex',self.combo_dsp_blur);
              self.$dsp.bind('click.combosex',function(){
                return false;
              });
              
              if (self.extra.headline) {
                self.$dsp.addClass("combosex_headline").text(self.extra.headline); 
              }
            }
            
            self.$arrow = $('<span class="combosex_arrow combosex_arrow_down"><em></em></span>');  
            self.$combospan.prepend(self.$arrow); 
       
            self.$arrow.outerWidth(self.scrollWidth);
            if (!self.options.classCombo) {
              objw = objw+self.scrollWidth;
            }
  
            self.$combospan.bind("mousedown.combosex", self.combo_mousedown);
          }
        }
        
        self.$combospan.append(self.$def,self.$val);
  
        self.$inp.bind('focus.combosex',self.combo_focus);
        self.$inp.bind('blur.combosex',self.combo_blur);
        
        if (self.options.tags) {
          self.$combospan.delegate('.combosex_input','focus.combosex',self.combo_focus);
          self.$combospan.delegate('.combosex_input','blur.combosex',self.combo_blur);
          
          
          self.$combospan.delegate(".combosex_tags .combosex_tag_del","click.combosex",function() {
            var v = $(this).attr("rel");
            var ki = $.inArray(v,self.val);
            if (ki >- 1) {$('option[value="'+v+'"]',self.$obj).removeAttr("selected").prop("selected",false)}
            //self.combo_hold_reopen = false;
            self.options_clicking  = true;
            self.val = self.$obj.val();
            self.tagsRender(self.val);
            
            self.options_close();
            self.options_open();
            
            self.combo_hover = false;
            options_hovered = false;
            options_opened = false; // LIQ;
            
            
            self.$inp.trigger("focus.combosex");
            self.$obj.trigger('change');
            self.tag_actived_id = false;
            return false;
          });
          
          /* TODO
          self.$combospan.delegate(".combosex_tags li","mousedown.combosex",function(){
            self.tag_active($(this));
          });
          */
          
        }
        
        
  
        self.$combospan.append(self.$spinner);
  
        self.$combospan.bind('complete.combosex',function(e,res){
          if (self.extra.multiple) {
            var c_list = self.$list_multi;  
          } else {
            var c_list = self.$list; 
          }
          suggestComplete (self, c_list, res.results, res.str);
        });
        
        self.$combospan.bind("mouseenter.combosex",function(){
          options_hovered = self.uid;
          self.combo_hover = true;
        });
        
        self.$combospan.bind("mouseleave.combosex",function(){
          options_hovered = false;
          self.combo_hover = false;
        });
  
        self.combosize.width = self.$combospan.outerWidth();
        self.combosize.height = self.$combospan.outerHeight();
        
        if (self.extra.type=="select") {
          if (self.extra.multiple) {
            heightminus += $(".combosex_search",self.$list_multi).outerHeight();
          }
        }
        
        combo[self.uid] = self;
        self.$obj.data("combosex",self);
        self.$obj.data("csuid",self.uid);
      };
  
  
  
      self.tag_active = function (tag) {
        /* TODO
        if (tag.length) {
          tag.parent().find('li').removeClass('combosex_tag_active');
          tag.addClass("combosex_tag_active");
          self.tag_actived_id = tag.find('.combosex_tag_del').attr("rel");
        } else {
          self.tag_actived_id = false; 
        }
        */
      };
      
      self.combosize = {
        width: self.$obj.width()
      };
      
      self.tagsRender = function (values) {
        if (typeof(values) == "string") {
          var values = [values];
        }
        
        var tagsRenderDefault = function (val,text) {
          var dsp = val;
          if (text) {
            dsp = text+'<i>'+val+'</i>';
          } 
          return '<li><span>'+dsp+'</span><a class="combosex_tag_del" rel="'+val+'"><b>&#215;</b></a></li>'
        }
        
        var tagsRender = tagsRenderDefault;
        
        if (self.options.tagsRender && typeof self.options.tagsRender=="function") {
          tagsRender = self.options.tagsRender;
        }
        
  
        var tags_ul = '<ul>';
        for (var i in values) {
          var dspval = false;
          var optd = $('option[value="'+values[i]+'"]',self.$obj);
          if (optd.length) {
            if (values[i]!=optd.text()) {dspval = optd.text()}
          }
          tags_ul += tagsRender(values[i],dspval);
        }
  
        tags_ul += '<li class="combosex_input_span"><span class="combosex_input_hidden"></span></li>';
        tags_ul += '</ul>';
        self.$tags.html(tags_ul);
        self.$inp.addClass('combosex_input_tag');
        $('.combosex_input_span',self.$tags).append(self.$inp);
        
        if (self.extra.append) {
          self.$combospan.append(self.$apndr);
        }
      };
      
      self.suggest = {
        loading: function() {self.$spinner.show()},
        loaded: function() {self.$spinner.fadeOut(333)} 
      };
  
      
      self.options_open = function () {
  
        if (self.extra.disabled) { return false; }
        
        if (self.extra.readonly) { return false; }
         
        if (!self.options_active) {       
  
          options_opened = self.uid;
          $(".combosex_main").removeClass("combosex_active");
          self.options_active = true;
          var list = comboRender ( self, self.data.hash );
          $(".combosex_poplist:hidden").remove();
          self.$list = $('<div class="combosex_poplist combosex_listwrap_'+self.uid+'"><div class="combosex_options combosex_options_'+self.uid+'">'+list+'</div></div>');
                  

          self.$list.data("csuid",self.uid);
          self.$list.hide();
          
          if (self.extra.input && self.extra.type == 'select' && !self.options.tags) {
            self.$list.prepend('<div class="combosex_search"><div></div></div><div class="combosex_search_nofound" style="display:none;"><em>'+self.options.lang.noResults+'</em></div>');
            self.$inp.val('');
            self.$ph.show();
            $('.combosex_search div',self.$list).append(self.$ph,self.$inp);
            if (self.extra.append && self.extra.input) {
              $('.combosex_search div',self.$list).append(self.$apndr);
              self.$apndr.removeClass('combosex_append_on');
            }
          }
  
          $B.append(self.$list);
          
          if (self.options.classOptions) {
            self.$list.addClass(self.options.classOptions);
          }
          
          self.lasthoveredoption = $('a[rel="'+self.val+'"]:first',self.$list);
  
          optionsResizer(self);
          
          self.$list.delegate(".combosex_options a","mouseenter.combosexlist" + self.uid,function(){
            

            $('.combosex_options_'+self.uid+' a').removeClass("combosex_options_hover");
            self.lasthoveredoption = $(this);
            options_hovered = self.uid;
            self.options_hover = true;
            self.lasthoveredoption.addClass("combosex_options_hover");
          });
          
          self.$list.delegate(".combosex_options a","mouseleave.combosexlist" + self.uid,function(){

            self.options_hover = false;
            options_hovered = false;
            if (self.lasthoveredoption) {
              self.lasthoveredoption.addClass("combosex_options_hover")
            }
          });
          
          self.$list.bind("mouseenter.combosexlist"+self.uid, function(){

            self.options_hover = true;
            options_hovered = self.uid;
          });
          
          self.$list.bind("mousedown.combosexlist"+self.uid, function(e){
            e.stopPropagation();
          });
          
          self.$list.bind("mouseleave.combosexlist"+self.uid, function (e) {
            self.options_hover = false;
            options_hovered = false;
          })
          
          self.$list.delegate(".combosex_options a","click.combosexlist" + self.uid, function(){
            self.option_select($(this));
          });
          
          self.$list.bind("click",function(){
            //self.$inp.trigger('focus.combosex');
          });
  
          self.options_hide();
          
          if (self.extra.type=="input" && (self.$inp.val()!='' || self.options.showOnFocus)) {
            comboSuggest (self.$inp, self);
          } 
          
          if (self.extra.type=="select") {
            self.options_show();
           
          }
          
          if (self.lasthoveredoption) {
            //self.lasthoveredoption.addClass("combosex_options_hover");
          }
          
          self.$combospan.addClass("combosex_active");
        }
      };
      
      
      
      self.options_close = function() {
        if (self.options_active) {
          options_opened = false;
          self.$combospan.removeClass("combosex_active");
          self.options_hover = false;
          self.options_hide()
          self.$list.remove();
        }
      }
      
      self.options_show = function () {
       
        var pos = self.$combospan.offset();
        var activeoption = $('a[rel="'+self.val+'"]:first',self.$list);
        var scrollTo = 0;


        
        options_opened = self.uid;
  
        if (!self.options_visible && self.$list && self.$list.find('li').size()>0) {
          
          self.$list.css({left:pos.left+'px'}).show();
          
          if (activeoption.length) {
            self.lasthoveredoption = activeoption;
            var ao_position = activeoption.parent().position();
            var scrollTo = ao_position.top - (self.$list.height()/2);
            activeoption.addClass('combosex_options_hover');
          }
          
          $('.combosex_options_'+self.uid).scrollTop(scrollTo);
          
          self.$list.fadeIn(self.options.fadeSpeed, function(){           
            options_opened = self.uid;
            self.options_visible = true;
            self.options_active = true;
            options_opened = self.uid;
            
            setTimeout(function(){
              $('.combosex_input:first',self.$list).trigger("focus");
              self.$combospan.addClass("combosex_active")
            },1);
          });
          self.options_active = true;
          self.options_visible = true;
        }
      }
      
      
      self.options_hide = function (speed) {
        var spd = self.options.fadeSpeed;
        if (speed) { spd = speed }
        if (self.options_visible) {
          self.$list.fadeOut(spd,function(){
            self.options_active = false; // LIQ;
            self.options_visible = false;
          });
        }
        // options_hide = false; // WTF;
      }
      
      
      
      
      self.combo_focus = function () {
        $(".combosex_main").removeClass("combosex_active");
        
        if (self.extra.disabled) {return false}
        if (self.extra.readonly) {return false}
        
        
        self.$combospan.addClass("combosex_active");
        if (last_multi_focused) {
          if (last_multi_focused && options_hovered != last_multi_focused && combo[last_multi_focused]) {
            if (combo[last_multi_focused].multi_focus) {
              combo[last_multi_focused].$list_multi.triggerHandler("blur.combosex");
            }
          }
        }
  
        if (self.extra.type == 'select') {
          if (combo_focused && combo_focused != multi_focused) {
            $(".combosex_input",combo[combo_focused].$combospan).trigger("blur.combosex")
          }
         
          if (self.extra.multiple) {
            multi_focused = self.uid;
            last_multi_focused = self.uid;
            self.$combospan.addClass("combosex_active");
          } 
        }
        
        if (self.extra.type == 'input' || self.options.tags) {
          multi_focused = false; 
          combo_focused = self.uid;
          self.options_open();
        }
      }
      
      self.combo_blur = function () {
  
        if (self.$list_multi) {
          if (self.extra.type=="select" && self.extra.multiple) {
            if (self.uid != multi_focused || options_hovered != self.uid && self.multi_focus){
              self.$list_multi.triggerHandler("blur.combosex")
              multi_focused = false;
              if (self.$apndr) {self.$apndr.removeClass("combosex_append_on")}
            }
          }
        }
        
  
        
        if (self.extra.type=="input") {
  
          var v = self.$inp.val();
          
          //console.log(combo_focused, options_opened, self.options_active, options_hovered, self.uid);
          
          if (combo_focused == options_opened && self.options_active) {
            //self.options_active = false;
            options_hovered = false; // LIQ;
          }
          
          if (!self.options_active && !self.options.tags && combo_focused == self.uid && options_opened == self.uid) {
            self.options_active = true;
            self.options_close();
            self.options_active = false;
          }

          
          if (combo_focused == self.uid && !options_opened && !self.options.tags) {

            if (!self.options.append) {
              
              var cg = strong_search(self.data.hash,v.toLowerCase()); // LIQ;
              if (!cg && !self.extra.append) {
                self.val = '';
                self.$val.val('');
                self.$inp.val('');
                self.$obj.val('')
              }
            }
            
            self.$obj.triggerHandler('change');
            
            if (combo_focused) {
              combo_focused = false
            }
          }
          
          if (self.options.tags) {
            self.$inp.val('');
            
            if (combo_focused==options_opened && !self.options_active) {
              self.options_active = true;
              self.options_close(); // LIQ;
              self.options_active = false;
            } 
            
          } 
          self.$obj.triggerHandler('blur');
        }

        combo_focused = false;
      }
      
  
      self.combo_dsp_focus = function () {
        combo_prefocus = self.uid;
        $(".combosex_main").removeClass("combosex_active");
        if (self.extra.disabled) {return false}
        if (self.extra.readonly) {return false}
        self.$combospan.addClass("combosex_active");
        //self.options_open();
      }
      
      self.combo_dsp_blur = function () {
        $(".combosex_main").removeClass("combosex_active");
        self.$combospan.removeClass("combosex_active")
        combo_prefocus = false;
      }
      
      
      self.combo_mousedown = function (e) {
  
        if (self.extra.disabled) {return false}
        if (self.extra.readonly) {return false}
  
        if (self.extra.type=="select") {
          if (self.extra.multiple) {
            $(".combosex_main").removeClass("combosex_active");
            self.$combospan.addClass("combosex_active");
            self.$inp.trigger("focus.combosex");
            //e.stopPropagation();
          } else {
            if (!self.options_active) {
              self.options_open();
            } else {
              self.options_close();
            }
          }
        }
        
        if (self.extra.type=="input") {
  
        }
      }
      
      
      
      self.change_multi_values = function () {
        var values = [];
        $('option',self.$obj).removeAttr('selected').prop('selected',false)
        $('.combosex_options_'+self.uid+' .combosex_options_active').each(function(i,e) {
          var v = $(e).attr('rel');
          values.push(v);
          var opt = $('option[value="'+v+'"]',self.$obj);
          
          if (!opt.length) {
            opt = $('<option selected="selected" value="'+v+'">'+v+'</option>');
            self.$obj.append(opt);
          }
          
          if (opt) {
            opt.attr('selected','selected').prop('selected',true);
          }
          
          self.data = {
            hash: getOptionsFromSelect ( self.$obj )
          }
        
          
        });
   
        self.val = values;

        self.$obj.val(values).triggerHandler('change');
      }
      
        
      self.option_select = function (option) {
        

        
        if (!option.length || !option) {
          return false; 
        }
        
        
        if (option.hasClass("combosex_options_disabled")) {return;}
        
        if (self.options.tags) {
          if (option) {
            var v = option.attr('rel');
            if (!self.val) {self.val = []}
            
            if ($.inArray(v,self.val)<0) {
              self.val.push(v);
              
              if (!$('option[value="'+v+'"]',self.$obj).length) {
                self.$obj.append('<option value="'+v+'" selected="selected">'+$('span',option).text()+'</option>');
              } else {
                $('option[value="'+v+'"]',self.$obj).text($('span',option).text());
              }
              
              self.tagsRender (self.val);
              self.$obj.val(self.val);
              self.$obj.triggerHandler('change');
              options_hovered = false;
            }
            
            self.$inp.trigger("focus.combosex");
            self.$val.val(self.val);
            self.$inp.val('');
            
            $(".combosex_options",self.$list).html(comboRender(self,self.data.hash));
            $('.combosex_append_on',self.$combospan).removeClass("combosex_append_on");
            self.lasthoveredoption = false;
          }
          
          if (!self.options.optionsNoHide) {
            self.options_hide(); /* self.options_close(); LIQ */
          }
        }
        
        
        if (self.extra.type=="select") {
          if (self.extra.multiple) {
          
          } else {
            if (self.options_active) {
              if (option) {
                var val = option.attr('rel');
                self.API.val.apply(self,[val]);
                self.$obj.trigger('change');
                self.combo_hold_reopen = false;
                self.options_clicking  = true;
                self.options_close();
                self.$dsp.trigger("focus.combosex");
                if (self.extra.headline) { self.$dsp.text(self.extra.headline) }
              }
            }
          }
        }
        
  
        if (self.extra.type=="input" && !self.options.tags) {
          if (self.options_active) {
            if (option) {
              self.val = option.attr('rel');
              
              if (self.$ph) {self.$ph.hide();}
              
              self.$val.val(self.val);
              self.$inp.val($("span",option).text());//.trigger("blur.combosex"); // LIQ;
              self.$obj.val(self.val);//.triggerHandler("blur");
              self.$obj.triggerHandler('change');
              self.combo_hold_reopen = false;
              self.options_clicking  = true;
              
              self.$inp.trigger("focus.combosex");
              self.options_hide();

            }
          }
        }
        
        if (self.options.onSelect && typeof self.options.onSelect == 'function') {
          self.options.onSelect(self);
        }
  
        optionsResizer (self);
      }
  
  
      self.attach();
      
      
      self.API = {
        reinit: function (args) {
    
        },       
        val: function (val) {
          if (self.extra.type=="select") {
            if (self.extra.multiple) {
              
            } else {

              self.val = val;
              
              var search = searchOptionByVal(self.data.hash,val);

              if (self.extra.append && !search) {
                var objval = $('<option value="'+val+'">'+val+'</option>');
                $(self.$obj).append(objval);
                search = {val:val,text:val};
              }
              
              if (search) { 
                this.dspval = search.text; 
                self.$val.val(val);
                self.$dsp.text(this.dspval);
                self.$obj.val(val); 
              }
              
            }
          }
          
          
          if (self.extra.type=="input" && !self.options.tags) {
            self.val = val;
            self.$val.val(val);
            self.$obj.val(val); 
          }
          
          
          if (self.options.tags) {
            
          }
        },
        
        
        optionsDisable: function (val) {
          if (!$.isArray(val)) {val = [val]}
          for (var i in self.data.hash) {
            if ($.inArray(self.data.hash[i].val, val)>-1) {
              self.data.hash[i].disabled = true;
            }
          }
          
          for (var i in val) {
            $('option[value="'+val[i]+'"]',self.$obj).prop("disabled",true);
          }
        },
        
        
        optionsEnable: function (val) {
          if (!$.isArray(val)) {val = [val]}
          for (var i in self.data.hash) {
            if ($.inArray(self.data.hash[i].val, val)>-1) {
              self.data.hash[i].disabled = false;
            }
          }
          for (var i in val) {
            $('option[value="'+val[i]+'"]',self.$obj).prop("disabled", false);
          }
        }
      }
      
      
  
      return combo[self.uid];
    }
  
  
    var defaultRender = function (data,cmb) {
      var list = '<ul>';
      var recur = function (where) {
        
        $.map(where,function(el) {
          if (el) {
            if (el.group) {
              list += '<li class="combosex_optgroup"><span class="combosex_optgroup_label"><span>'+el.text+'</span></span><ul>';
              recur (el.group);
              list +='</ul></li>';
            } else {
              var sel = " "; if (el.selected) { sel = ' combosex_options_active'; }
              var dis = " "; if (el.disabled) { dis = ' combosex_options_disabled'; }
              
              /*if (!el.text) {el.text = '&nbsp;'}*/
              list += '<li><a class="'+sel+dis+'" rel="'+el.val+'"><span>'+el.text+'</span></a></li>';
            }
          }
        });
      }
      if (data) {
        recur (data);
      }
      list += '</ul>';
      
      return list;
    }
  
    var comboRender = function (cmb, data) {
      if (cmb.options.tags) {
        if (cmb.val && data) {
          
          var data = $.grep(data,function(el) {
            if ($.inArray(el.val, cmb.val)>-1) {
              return false; 
            } else {
              return el;
            }
          });
        }
      }
  
      if (cmb.options.render) {
        var render_engine = cmb.options.render;
      } else {
        var render_engine = defaultRender;
      }
      
      var rendered = render_engine(data,cmb);
  
      cmb.lasthoveredoption = false;
  
      if (rendered) {
        return rendered;
      } else {
        return ''; 
      }
    }
  
    
    var getOptionsFromSelect = function (select) {
      var arr = [];
      var options_recursion = function (obj) {
        $.map(obj,function(n) {
          
          if ($(n).prop('tagName').toLowerCase()=='optgroup') {
            var group = [];
            $.map($("> *", n),function(b) {
              group.push({val:$(b).attr("value"),text:$(b).text(),selected:true?$(b).prop("selected"):false,disabled:true?$(b).prop("disabled"):false})
            });
            arr.push({text:$(n).attr("label"), group: group})
          } 
  
          else if ($(n).prop('tagName').toLowerCase()=='option') {
            var v = $(n).attr("value");     
            var t = $(n).text();
            
            if (!v) { v=t }
            else if (!t) {t=v}
            arr.push({val:v,text:t,selected:true?$(n).prop("selected"):false,disabled:true?$(n).prop("disabled"):false})
          }
        });
      } 
      
      
      options_recursion($("> *", select));
      
      return arr;
    }
    
    
    var getOptionsFromOptions = function (arr_options) {
      var arr = [];

      if ($.isArray(arr_options)) {
        for (var i in arr_options) {
          arr.push({val:arr_options[i],text:arr_options[i]});
        }
      } 
 
      else {
        for (var i in arr_options) {
          arr.push({val:i,text:arr_options[i]});
        }
      }
  
      return arr;
    }
  
    var optionsResizer = function (cmb) {
  
      if (cmb.extra.multiple) {return false;}
      
      var pos = cmb.$combospan.offset();
      var listheight = cmb.$list.height();

      if (CS.browser.msie && CS.browser.version=='6.0') {
        var nheight = 300;
        if (cmb.options.optionsHeight) nheight = cmb.options.optionsHeight;
        if (cmb.$list.height()>nheight) {
          cmb.$list.height(nheight);
        }
        listheight = nheight;
      }
  
      var padding_top = pos.top-$W.scrollTop();
      var padding_bottom = $W.scrollTop()+$W.height()-pos.top;
  
      var toppos = 0;
  
      if (padding_bottom>=padding_top || listheight<padding_bottom) {
        toppos = pos.top + cmb.$combospan.outerHeight();
        cmb.$list.removeClass('combosex_options_dropup')
      } else {
        toppos = pos.top-listheight;
        cmb.$list.addClass('combosex_options_dropup')
      }
  
      cmb.$list.width("auto")
      
      var ww = cmb.$list.width();
      
      if (ww<=cmb.$combospan.width()) {
        ww = cmb.$combospan.width();
      } else {
        
      } 
  
      cmb.$list.css({top:toppos,width:ww});
    }
    
    
    
    var document_mousedown = function(e) {
      mousedown = true;
      
      
      
      
      if (last_multi_focused) {
        if (last_multi_focused && options_hovered != last_multi_focused && combo[last_multi_focused]) { 
          combo[last_multi_focused].$list_multi.triggerHandler("blur.combosex");
        }
      } 
      
      for(var i in combo) {
        if (options_hovered != i) {
          if (combo[i].options_active && !combo[i].combo_hover) {
            combo[i].options_close();
            combo[i].options_active = false;
          }
          combo[i].$combospan.removeClass("combosex_active");
        }
      }
      
    }
    
    var document_mouseup = function(e){
      mousedown = false;
    }
    
    
    var combo_input_keyup = function(s) {
  
      var inp  = false,
          cmb  = false,
          list = false;
          
      var _csuid = false;    
      
      if (s.target) {
        inp = $(s.target);
        var parentcombo = inp.parents(".combosex_poplist");
        _csuid = parentcombo.data("csuid");
      }
  

      
      if (multi_focused && multi_focused != options_opened) {
        options_opened = false;
      }
  
      if (options_opened || multi_focused) {
        if (combo[options_opened] || combo[multi_focused]) {
          if (options_opened) {multi_focused = false}
          if (combo[options_opened]) {
            cmb = combo[options_opened];
            list = combo[options_opened].$list;
            if (cmb.extra.type=="input") {
              inp = cmb.$inp;
            }
          } 
          if (combo[multi_focused]) {
            cmb = combo[multi_focused];
            list = combo[multi_focused].$list_multi;
          } 
        }
      }
      
      if (!options_opened && !multi_focused) {
        if (_csuid) {
          if (combo[_csuid]) {
            cmb = combo[_csuid]
            if (cmb.extra.type=="select" && cmb.extra.multiple) {
              list = combo[_csuid].$list_multi;
            } else {
              options_opened = _csuid;
              list = combo[_csuid].$list; 
            }
          }
        } else if (combo_focused) {
          if (combo[combo_focused]) {
            cmb = combo[combo_focused];
            if (cmb.options.tags) {
              list = cmb.$list;
            }
          }
        }
      }
      
      csdebounce ( function(s) {
        if (inp && cmb && list) {
          comboSuggest (inp, cmb, list); 
        }
      }, cmb.options.delay )(s);
    }
    
    
    var defaultSearch = function (data, e) {
      var arr = $.map(data,function(el,i) {
        if (el.group) {
          var gr = {
            text: el.text,
            group: $.map(el.group,function(grp) {
              if (!grp.val.toLowerCase().indexOf(e.str) || !grp.text.toLowerCase().indexOf(e.str)) {
                return grp;
              }
            })                    
          }
          if (gr.group.length) {
            return gr;
          }
        } else if (el.val) {
          el.val = el.val.toString();
          el.text = el.text.toString();

          if (!el.val.toLowerCase().indexOf(e.str) || !el.text.toLowerCase().indexOf(e.str)) {
            return el;
          } 
        }
      });
      e.results(arr);
    }
    
    
    
    var searchOptionByVal = function (data, str) {
      var found = false;
      str = str.toLowerCase();
      var arr = $.map(data,function(el,i) {
        if (el.group) {
          var gr = {
            text: el.text,
            group: $.map(el.group,function(grp) {
              if (grp.val.toLowerCase() == str || grp.text.toLowerCase() == str) {
                return grp;
              }
            })                    
          }
          if (gr.group.length) {
            return gr;
          }
        } else if (el) {
          
          if (typeof el.val == 'string') { var _val = el.val.toLowerCase() } else { var _val = el.val }
          if (typeof el.text == 'string') { var _text = el.text.toLowerCase() } else { var _text = el.val } 
          if (_val == str || _text == str) {
            found = el;
            return el;
          } 
        }
      });
      
      return found;
    }
    
    var strong_search = function (data, str) {
      var arr = [];
      if (data) {
        arr = $.map(data,function(el,i) {
          if (el.group) {
            var gr = {
              text: el.text,
              group: $.map(el.group,function(grp) {
                if (grp.val.toLowerCase() == str || grp.text.toLowerCase() == str) {
                  return grp;
                }
              })                    
            }
            if (gr.group.length) {
              return gr;
            }
          } else if (el.val) {
  
            if (typeof el.val == 'string') { var _val = el.val.toLowerCase() } else { var _val = el.val }
            if (typeof el.text == 'string') { var _text = el.text.toLowerCase() } else { var _text = el.val } 
  
            if (el.val == str || el.text == str) {
              return el;
            } 
          }
        });
      }
      
      if (arr.length) {
        return arr;
      } else {
        return false;
      }
    }
    
    
    
    
    var suggestEngine = function (cmb) {
      
      var db = cmb.data.hash;
      var caller = {
        value: cmb.val,
        results: function (data) {
          cmb.suggest.loaded();
          cmb.$combospan.trigger('complete.combosex',{results:data,str:cmb.searchString});
        } 
      }
      
      
      
      return {
        go: function (val) {
          var out = false;
          cmb.searchString = val;
          cmb.suggest.loading();
          caller.str = val;

          
          if (cmb.options.suggest) {
            out = cmb.options.suggest (db,caller)
          } else {
            out = defaultSearch (db,caller);
          }
          if (out) {
            return out;
          } else { return []; }
        }
      }
    }  
    
    
    
    var suggestComplete = function (cmb, list, results, str) {
  
      var strongs = strong_search (results, str);
  
      if (cmb.extra.append && cmb.$apndr) {
        cmb.$apndr.removeClass("combosex_append_on");
      }
      
      if (!strongs && cmb.extra.append && cmb.$apndr) {
        cmb.$apndr.addClass("combosex_append_on");
      } 
      
      var nores = $('.combosex_search_nofound',list);
     
      $(".combosex_options",list).html(comboRender(cmb,results))
      
      optionsResizer(cmb);
      
      if (cmb.extra.type == "select") {
        $('.combosex_search_nofound',list).hide();
        if (!results.length) {
          $('.combosex_search_nofound',list).show();
        }
      }
  
  
      if (!cmb.extra.multiple){
        if (cmb.extra.type == "input" ) {
          if (results && results.length>0) {
            cmb.options_show();
          } else {
            cmb.options_hide();
          }
        }
        
        if (results && $('.combosex_options a:visible', list).length) {
          $('.combosex_options a',list).removeClass('combosex_options_hover');
          cmb.lasthoveredoption = $('.combosex_options a:visible:first',list);
          cmb.lasthoveredoption.addClass('combosex_options_hover');
        }
      }
    }
  
  
  
  
    var comboSuggest = function (inp, cmb) {
  
      var results = false;
      
      if (cmb.extra.append && cmb.$apndr) {
        cmb.$apndr.removeClass("combosex_append_on");
      }
  
      if (inp && inp.val() != undefined) {
        var str = inp.val().toLowerCase().toString();
        var nores = $('.combosex_listwrap_'+cmb.uid+' .combosex_search_nofound');
        
        if (str || str=="") {
          new suggestEngine(cmb).go(str);
        } 
        
        else {
          if (cmb.options.showOnFocus && !cmb.extra.multiple) {
            cmb.options_show();
          }

          $('.combosex_listwrap_'+cmb.uid+' .combosex_search_nofound').hide();
          $(".combosex_options_"+cmb.uid).html(comboRender(cmb,cmb.data.hash)) ;
        }
      } 
      
      else {

        $(".combosex_options_"+cmb.uid).html(comboRender(cmb,cmb.data.hash));
      } 
    }
    
    
    
    
    var doGetCaretPosition = function (ctrl) {
      var CaretPos = 0;
      if (document.selection) {
      ctrl.focus ();
        var Sel = document.selection.createRange ();
        Sel.moveStart ('character', -ctrl.value.length);
        CaretPos = Sel.text.length;
      }
      
      else if (ctrl.selectionStart || ctrl.selectionStart == '0')
        CaretPos = ctrl.selectionStart;
      return (CaretPos);
    }
    
    var setCaretPosition = function (ctrl, pos){
      if(ctrl.setSelectionRange)
      {
        ctrl.focus();
        ctrl.setSelectionRange(pos,pos);
      }
      else if (ctrl.createTextRange) {
        var range = ctrl.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    }
    
    var document_keydown = function(e){
      if (e.which == 8) {
        if (combo_focused) {
          if (combo[combo_focused]) {
            var cmb = combo[combo_focused];
            if (cmb.options.tags) {
              if (doGetCaretPosition(e.srcElement)<1) {
                cmb.tag_active(cmb.$tags.find('li:not(".combosex_input_span"):last'));
              }
            }
          }
        }
      } 
      
      if (e.which == 38 || e.which == 40) {
        
        
        
        if (options_opened && combo_focused && combo_focused == options_opened) {
          if (combo[options_opened]) {
            if (!combo[options_opened].options_active) {
              combo[options_opened].options_open();
              
            }
          }
        }
  
        if (options_opened) {
          if (combo[options_opened]) {
            
            if (combo[options_opened].options_active) {
              var goop = -1;
              if (e.which == 40) {
                goop = 1;
              } 
              
              stop_search = true;
              var size = $('.combosex_options_'+options_opened+' a:visible').length;
              var labelheight = $('.combosex_options_'+options_opened+' .combosex_optgroup_label:first').outerHeight();
              var labelsizes  = $('.combosex_options_'+options_opened+' .combosex_optgroup_label').length;
    
              var now_option_index = -1;
              if (combo[options_opened].lasthoveredoption) {
                now_option_index = combo[options_opened].lasthoveredoption.index('.combosex_options_'+options_opened+' a:visible');
              }
  
              var gokey = now_option_index + goop;
              if (gokey<0) { gokey = size-1 }
              if (gokey>size-1) { gokey = 0 }
              combo[options_opened].lasthoveredoption = $('.combosex_options_'+options_opened+' a:visible').eq(gokey);
              $('.combosex_options_'+options_opened+' a').removeClass("combosex_options_hover");
              combo[options_opened].lasthoveredoption.addClass('combosex_options_hover');
              var scrollTo = (combo[options_opened].lasthoveredoption.outerHeight()*gokey)+(labelheight*labelsizes) - combo[options_opened].$list.height()/2;
              $(".combosex_options_"+options_opened).scrollTop(scrollTo);
              
              
              
              e.preventDefault();
              return false;
            }
          }
        }
        
  
        if (multi_focused || options_hovered) {
          if (multi_focused && options_hovered != multi_focused) {
            var cmb = combo[multi_focused];
            
          }
          
          if (options_hovered && multi_focused && options_hovered == multi_focused) {
            var cmb = combo[options_hovered] ;
            
          }
  
          if (cmb && cmb.extra.type=="select") {
            stop_search = true;
            var size = $('.combosex_options_'+multi_focused+' a:visible').length;
            var labelheight = $('.combosex_options_'+multi_focused+' .combosex_optgroup_label:first').outerHeight();
            var labelsizes  = $('.combosex_options_'+multi_focused+' .combosex_optgroup_label').length;
  
            var goop = -1;
            if (e.which == 40) { goop = 1 }
            
            
            
            if (down_shift) { 
              if (cmb.startshift) {
                var now_option_index = -1;
                if (cmb.lastoptionclicked) {
                  now_option_index = cmb.lastoptionclicked.index('.combosex_options_'+multi_focused+' a:visible');
                }
                
                var gokey = now_option_index + goop;
                if (gokey<0) { gokey = 0 }
                if (gokey>size-1) { gokey = size-1 }
                
                cmb.lastoptionclicked = $('.combosex_options_'+multi_focused+' a:visible').eq(gokey);
                cmb.lastoptionclicked.addClass("combosex_options_active");
                
                var opt = cmb.lastoptionclicked;
                
                $('.combosex_options_'+multi_focused+' a').removeClass("combosex_options_active");
                var startindex = cmb.startshift.index('.combosex_options_'+multi_focused+' a:visible');
                var endindex = opt.index('.combosex_options_'+multi_focused+' a:visible');
                var select_from = startindex;
                var select_to = endindex;
  
                if (startindex > endindex) {
                  select_from = endindex;
                  select_to = startindex;
                }
  
                $('.combosex_options_'+multi_focused+' a:visible').slice(select_from,select_to).addClass("combosex_options_active");
                opt.addClass("combosex_options_active");
                cmb.startshift.addClass("combosex_options_active");
                
                var scrollTo = (opt.outerHeight()*gokey)+(labelheight*labelsizes) - cmb.$list_multi.height()/2;
                $(".combosex_options",cmb.$list_multi).scrollTop(scrollTo);
              } 
            } 
            
            else {
              var now_option_index = -1;
              if (cmb.lastoptionclicked) {
                now_option_index = cmb.lastoptionclicked.index('.combosex_options_'+multi_focused+' a:visible');
              }
              
              var gokey = now_option_index + goop;
              if (gokey<0) { gokey = size-1; }
              if (gokey>size-1) { gokey = 0; }
              cmb.lastoptionclicked = $('.combosex_options_'+multi_focused+' a:visible').eq( gokey );
              $('.combosex_options_'+multi_focused+' a').removeClass("combosex_options_active");
              cmb.lastoptionclicked.addClass("combosex_options_active");
              var scrollTo = (cmb.lastoptionclicked.outerHeight()*gokey)+(labelheight*labelsizes) - cmb.$list_multi.height()/2;
              $(".combosex_options_"+multi_focused).scrollTop(scrollTo);
              cmb.startshift = cmb.lastoptionclicked;
            }
            
            if ($(".combosex_options_"+multi_focused+' .combosex_options_active').length) {
              cmb.change_multi_values();
            }
            
            e.preventDefault();
            return false;
          }
        }
      }
  
      if (e.which==13) {
        stop_search = true;
        if (options_opened) {
          if (combo[options_opened]) {
            var cmb = combo[options_opened];
            
            if (cmb.lasthoveredoption) {
              cmb.option_select (cmb.lasthoveredoption);
              cmb.lasthoveredoption = false; // TODO;
              return false;
            } else {
              if (cmb.extra.append && !cmb.extra.tags) {
                cmb.API.val.apply(cmb,[cmb.$inp.val()]);
                
                cmb.options_close();
                cmb.$dsp.trigger("focus.combosex");
              }
            }
            
            if (cmb.extra.tags) {
              appender(cmb,cmb.$inp.val());
              return false; 
            }

          }
        } 
        
        if (multi_focused) {
          if (combo[multi_focused]) {
            var cmb = combo[multi_focused];
            //if (cmb.extra.append) {
              appender(cmb,cmb.$inp.val())
            //}
            return false;
          }
        } 
        
        
      }
  
      if (e.which == 16) { down_shift = true}
      if (e.which == 17) { down_ctrl = true}
  
      if (e.which == 16 || e.which == 17) {
        stop_search = true;
        if (multi_focused) {
          if (mousedown) {
            document.ondragstart = function() { return false }
            document.body.onselectstart = function() { return false }
          }
        }
      }
      
      if (e.which==32) {
        if (combo_prefocus) {
          if (combo[combo_prefocus]) {
            var cmb = combo[combo_prefocus];
            if (!cmb.options_active) {
              cmb.options_open();
              return false;
            }
          } 
        }
        
        if (options_opened) { 
  
        }
      }
      
      

      
      if (e.which==9) {
        stop_search = true;
        if (options_opened) {
          if (combo[options_opened]) {
            if (combo[options_opened].options_active) {
              combo[options_opened].options_close();
            }
          }
        }  
        
        if (multi_focused) {
          if (combo[multi_focused]) {
            if (combo[multi_focused].extra.multiple) {

              combo[multi_focused].$list_multi.triggerHandler("blur.combosex");
              multi_focused = false;
            }
          }
        }
  
        if (combo_focused) {
          if (combo[combo_focused]) {
            //combo[combo_focused].$inp.trigger("blur.combosex")
          }
        }
      }
    }
  
    var document_keyup = function(e) {
      
      if (e.which == 16) {down_shift = false;}
      if (e.which == 17) {down_ctrl  = false;}
      if (e.which == 16 || e.which == 17) {
        document.ondragstart = null;
        document.body.onselectstart = null;
      }
    }
  
    var appender = function (cmb,v) {
      
     
       
      if (cmb && v && v!='') {
  
        var check = !strong_search(cmb.data.hash,v);
        
       
        if (check) { check = {val:v,text:v} }
        
        if (cmb.options.appendCheck) {
          check = cmb.options.appendCheck(cmb.data.hash, v);
        }
        
        if (check && cmb.extra.append) {
          
          
          check.selected = true;
          cmb.data.hash.push(check);
          cmb.$apndr.removeClass('combosex_append_on');
          
          if (cmb.extra.type=="select") {
            if (cmb.extra.multiple){
              cmb.$inp.val('');
              $('.combosex_search_nofound',cmb.$list_multi).hide();
              $('.combosex_options_'+cmb.uid).html(comboRender(cmb,cmb.data.hash))
              cmb.change_multi_values();
            } else {
              $('.combosex_options_'+cmb.uid).html(comboRender(cmb,[check]));
              cmb.option_select($('.combosex_options_'+cmb.uid+' a[rel="'+v+'"]'));
              
              return false;
            }
          }
          
          if (cmb.extra.type=="input") {
            $('.combosex_options_'+cmb.uid).html(comboRender(cmb,[check]));
            cmb.option_select ($('.combosex_options_'+cmb.uid+' a[rel="'+v+'"]'));
            return false;
          }
        }
      }
    }
    
    
    $D.delegate('.combosex_append_on','mouseenter.combosex mousedown.combosex',function(e) {
      e.stopPropagation();
      options_hovered = Number($(this).attr("rel"));
      return false;
    });
    
    $D.delegate('.combosex_append_on','click.combosex',function(e){
      
      var rel = Number($(this).attr("rel"));
      options_hovered = rel;
      if (rel && combo[rel]) {
        var cmb = combo[rel];
        var v = cmb.$inp.val();
        appender(cmb,v);
      }
      e.preventDefault();
    });
  
    $D.unbind('keydown.combosex');
    $D.bind('mousedown.combosex', document_mousedown);
    $D.bind("mouseup.combosex", document_mouseup);
    
    
    $D.delegate(".combosex_input","keyup.combosex", function(e) {
      var inp = $(this);
      
      document_keyup(e); // LIQ;
      
      if (down_shift) {
        stop_search = true;
      }
      if (stop_search) {
        stop_search = false;
        return false;
      }
      
      return combo_input_keyup(e);
    });
    
    $D.bind('keydown.combosex', document_keydown);
    $D.bind('keyup.combosex', document_keyup);
    
    $D.delegate('.combosex_input',"keydown.combosex keyup.combosex change.combosex",function(){
      
      var inp = $(this);
      var str = inp.val();
      
      var $ph = inp.parent().find(".combosex_ph");
      if ($ph.length>0) {
        if (str && str!="") {
          $ph.hide();
        } else {
          $ph.show();
        }
      }
      
      if (combo_focused) {
        if (combo[combo_focused]){
          var cmb = combo[combo_focused];
          
          
          if (cmb.extra.type == "input") {
            if (cmb.options.tags) {
              if (inp.hasClass('combosex_input_tag')) {
                var inp_span = inp.parent();
                var hid = $('.combosex_input_hidden',inp_span);
                hid.text(inp.val());
                
                var nwidth = hid.outerWidth();
                if (nwidth<30) {
                  nwidth = 30;
                } 
                
                var maxwidth = inp.parents('.combosex_main').innerWidth()-30;
                if (nwidth > maxwidth) {
                  nwidth = maxwidth;
                }
                
                inp_span.width(nwidth);
              }
            } 
            
            optionsResizer (cmb);
          }
          
          
          
        }
      }
      
      
      
     
    });
  
  
    $D.delegate(".combosex_search, .combosex_text, .combosex_tagged","click",function(e){
      $(this).find(".combosex_input").trigger("focus.combosex");
      e.stopPropagation();
    });
  
    
    
    return this.each(function(i,el) {
      new Combosex($(el), options, CS.args);
    });
  }


var options_hovered = false,
    options_opened = false,
    cslength = 0,
    down_shift = false,
    down_ctrl = false,
    multi_focused = false,
    combo_prefocus = false,
    combo_focused = false,
    mousedown = false,
    combo = {},
    last_multi_focused = false,
    last_options_opened = false,
    keyup_debounce = 333,
    stop_search = false,
    $D = $(document), 
    $W = $(window),
    $B = $('body');
    
    
})(jQuery);